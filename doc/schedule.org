* remaining work for beta
** TODO multiple invokations for repl
** DONE region-based allocators for tulip values
CLOSED: [2016-08-27 Sat 13:23]
*** DONE preallocation of the region
CLOSED: [2016-08-18 Thu 15:58]
*** DONE commandline param for heap size
CLOSED: [2016-08-22 Mon 18:11]
*** DONE struct to track usage metadata
CLOSED: [2016-08-18 Thu 15:58]
*** simple collector
** DONE region-based allocators for modules
CLOSED: [2016-08-27 Sat 13:26]
*** DONE region
CLOSED: [2016-08-18 Thu 15:58]
*** TODO querying modules by name and/or version
** DONE scope table, definition for a single process
CLOSED: [2016-08-18 Thu 17:14]
*** DONE change tulip value metadata when things fall out of scopes
CLOSED: [2016-08-22 Mon 15:28]
** DONE closures
CLOSED: [2016-08-27 Sat 13:23]
*** TODO branch semantics
*** TODO definitions for runtime closure creation
** DONE concrete forms of values
   CLOSED: [2016-08-30 Tue 14:09]
*** DONE generate llvm names qualified by module and module version
CLOSED: [2016-08-27 Sat 13:27]
*** DONE values in definitions
    CLOSED: [2016-08-30 Tue 14:09]
*** DONE values in calls
    CLOSED: [2016-08-30 Tue 14:09]
*** TODO definitions for runtime constructors
** TODO concrete forms of control-flow semantics
*** TODO reordering for eager eval
** TODO partial application
*** TODO wrapper functions to generate closures
** DONE name reference between modules
CLOSED: [2016-08-27 Sat 13:25]
see: notes/cross module calls
*** DONE gen declarations for qualified names
CLOSED: [2016-08-27 Sat 13:25]
*** DONE see if llvm metadata can express "private" members of a module
CLOSED: [2016-08-18 Thu 17:16]
linkage type `private`
*** TODO perform module linking before function invocation
*** TODO error handling for linking failures
* architecture
** interface
*** file reader
reads a file, exposes it as a stream, closes file when asked
not very complicated
*** repl
this interface needs more planning
** compiler
the compiler receives a stream of characters from the interface, consumes that stream and builds a set of asts
it resolves any static module dependencies and instantiates new file interfaces to read them
it is currently not planned to work as a server, and should continue parsing until all static module dependencies have been loaded
** runtime
*** process manager
maintains a pool of processes and runs them concurrently
the process manager invokes tracer heuristics on process splits and on function (co)recursion
**** processes
each process contains its own scope, and needs to signal its blocking state to the manager
processes may or may not be compiled, and are tagged with their optimization state
**** garbage collector
occasionally interrupts the process pool to collect unreferenced processes or compress suspiciously large scopes
the gc will need a fairly clever strategy for recognizing orphaned processes
*** tracer
heuristics to determine if and how a cfg can be collapsed
performs transform rules, hosts mcjit and its symbol tables
*** transforms
set of rules to convert tulip ast to llvm ssa form
may be divided into tracing contexts, or written as combinators
* module/file layout
** /
*** src/
**** main.c
argument parsing
only needs to load a target file, connect it to the compiler, pass result to the runtime
**** types/
***** value.h
canonical c repr for all tulip types
***** tag.c/h
special logic for constructing tags and tag trees
***** core.c/h
specification of tulip-core ast as a tag tree
validator??
**** interface/
***** file.c/h
load files, very simple
**** compiler/
***** host.c/h
isolate lua dependency here
solely responsible for loading the lua interpreter and invoking the compiler
***** lua source files
parse tokens, locate and load static dependencies, return ast set
**** runtime/
layout here is pretty fuzzy until we plan tracing/processes in more detail
***** tracer/
optimization rules
***** transform/
ast -> ssa alchemy
***** ???
it is a mystery
* notes
** cross-module calls
when compiled, a tulip module needs to include declarations of any functions it uses in other modules
declaration stubs should only be generated when an actual callsite is encountered
